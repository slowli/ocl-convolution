var searchIndex = JSON.parse('{\
"ocl_convolution":{"doc":"OpenCL-accelerated 2D convolutions.","t":"QNNQIDDDDDDEDQDMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLLLLLLLLLLLMMLLLLMLLLLMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLL","n":["Acc","ChannelsFirst","ChannelsLast","ClParams","ConvElement","Convolution","ConvolutionBuilder","FeatureMap","FeatureMapShape","FiltersConvolution","I8Params","Layout","Params","Params","PinnedConvolution","batch_size","bit_shift","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","channels","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","common","compute","compute","compute","compute_with_biases","convert_scale","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dilation","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","f32","filter_bias","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","groups","hash","hash","hash","height","i8","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","layout","nchw","nhwc","output_bias","pads","params","params","params","pin","scale","set_params","set_params","set_params","shape","signal_bias","size","size","size","strides","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","with_biased_filters","with_filters"],"q":[[0,"ocl_convolution"],[190,"ocl::error"],[191,"core::clone"],[192,"ndarray::aliases"],[193,"core::convert"],[194,"ndarray::aliases"],[195,"core::fmt"],[196,"core::fmt"],[197,"core::result"],[198,"core::any"]],"d":["Type of the multiply-add accumulator.","<code>NCHW</code> / “channels-first” layout. In this layout, …","<code>NHWC</code> / “channels-last” layout. In this layout, …","OpenCL-friendly version of parameters. This is considered …","Supported element types for convolutions.","Convolution without pinned memory.","Convolution builder. The same builder can be used to …","Feature map, i.e., a signal or output of the convolution …","Shape of a <code>FeatureMap</code>.","Convolution with pinned filters memory. Pinning memory …","Params for the quantized convolution.","Memory layout of a <code>FeatureMap</code>.","General convolution parameters.","Parameters of the convolution.","Convolution with pinned memory for filters, signal and …","Number of samples constituting the map.","Upscale bit shift.","","","","","","","","","","","","","","","","","","","Creates a new floating-point convolution.","Creates a new quantized convolution.","Number of channels.","","","","","","","","","","","Common parameters.","Performs convolution on the provided <code>signal</code> and <code>filters</code>.","Computes the convolution on the provided signal.","Computes the convolution on the provided signal.","Performs convolution on the provided <code>signal</code> and <code>filters</code>, …","Converts <code>scale</code> to fixed-point presentation. The resulting …","","","","","","","","","","","","","","","","","","","","Signal dilation along spatial dimensions.","","","","","","","","","","","","","","","","","","Creates a new floating-point convolution builder. <code>size</code> …","Bias for the filters.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Number of groups in the convolution. Each group of filters …","","","","Spatial height.","Creates a new <code>i8</code> convolution builder. <code>size</code> determines the …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets the layout of this map.","Constructs a map from an NCHW-ordered tensor.","Constructs a map from an NHWC-ordered tensor.","Bias for the post-convolution transform.","Pads along spatial dimensions. The first 2 values denote …","Returns general parameters of the convolution.","Returns general parameters of the convolution.","Returns general parameters of the convolution.","Pins signal and output memory for this convolution.","Fixed-point scale of the post-convolution transform.","Sets convolution parameters.","Sets convolution parameters.","Sets convolution parameters.","Gets the shape of this map.","Bias for the signal.","Spatial size of the convolution.","Spatial size of the convolution.","Spatial size of the convolution.","Strides along spatial dimensions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Spatial width.","Returns the convolution with pinned filter / filter bias …","Returns the convolution with pinned filter memory."],"i":[12,9,9,12,0,0,0,0,0,0,0,0,0,12,0,8,7,4,16,17,2,8,9,11,3,7,4,16,17,2,8,9,11,3,7,2,2,8,8,9,11,3,7,8,9,11,3,7,7,4,16,17,4,7,3,4,16,17,2,8,9,11,3,7,4,16,17,2,8,9,11,3,7,3,4,16,17,2,8,9,11,3,7,8,9,11,3,8,9,11,3,4,7,4,16,17,2,8,9,11,3,7,4,16,17,2,8,9,11,3,3,7,3,8,9,3,8,4,4,16,17,2,8,9,11,3,7,4,16,17,2,8,9,11,3,7,11,11,11,7,3,4,16,17,16,7,4,16,17,11,7,4,16,17,3,8,9,11,3,7,4,16,17,2,8,9,11,3,7,4,16,17,2,8,9,11,3,7,4,16,17,2,8,9,11,3,7,8,4,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],3],[[5,[[4,[1]]]]]],[[[2,[6]],7],[[5,[[4,[6]]]]]],0,[8,8],[9,9],[[[11,[10]]],[[11,[10]]]],[3,3],[7,7],[[]],[[]],[[]],[[]],[[]],0,[[[4,[12]],[11,[12]],[14,[[13,[12]]]]],[[5,[[15,[12]]]]]],[[[16,[12]],[11,[12]]],[[5,[[15,[12]]]]]],[[[17,[12]],[11,[12]]],[[5,[[15,[12]]]]]],[[[4,[12]],[11,[12]],[14,[[13,[12]]]],18],[[5,[[15,[12]]]]]],[[19,1],20],[[],3],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],[21],0,[21],[21],[21],[21],[21],[21],[21],[21],[21],[[8,8],22],[[9,9],22],[[[11,[23]],[11,[23]]],22],[[3,3],22],[[],22],[[],22],[[],22],[[],22],[24,[[5,[[2,[1]]]]]],0,[[[4,[12]],25],26],[[[16,[12]],25],26],[[[17,[12]],25],26],[[[2,[27]],25],26],[[8,25],26],[[9,25],26],[[[11,[27]],25],26],[[3,25],26],[[7,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,3],[[]],[[]],0,[[8,28]],[[9,28]],[[3,28]],0,[24,[[5,[[2,[6]]]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[12]]],9],[[[14,[[13,[12]]]]],[[11,[12]]]],[[[14,[[13,[12]]]]],[[11,[12]]]],0,0,[[[4,[12]]]],[[[16,[12]]]],[[[17,[12]]]],[[[16,[12]],8],[[5,[[17,[12]]]]]],0,[[[4,[12]]],5],[[[16,[12]]],5],[[[17,[12]]],5],[[[11,[12]]],8],0,[[[4,[12]]],24],[[[16,[12]]],24],[[[17,[12]]],24],0,[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,[[[4,[12]],[14,[[13,[12]]]],18],[[5,[[16,[12]]]]]],[[[4,[12]],[14,[[13,[12]]]]],[[5,[[16,[12]]]]]]],"c":[],"p":[[15,"f32"],[3,"ConvolutionBuilder",0],[3,"Params",0],[3,"Convolution",0],[6,"Result",190],[15,"i8"],[3,"I8Params",0],[3,"FeatureMapShape",0],[4,"Layout",0],[8,"Clone",191],[3,"FeatureMap",0],[8,"ConvElement",0],[6,"ArrayView4",192],[8,"Into",193],[6,"Array4",192],[3,"FiltersConvolution",0],[3,"PinnedConvolution",0],[15,"slice"],[15,"u8"],[15,"i32"],[15,"usize"],[15,"bool"],[8,"PartialEq",194],[15,"u32"],[3,"Formatter",195],[6,"Result",195],[8,"Debug",195],[8,"Hasher",196],[4,"Result",197],[3,"TypeId",198]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
